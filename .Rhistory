plot(mtcars$hp, mtcars$wt)
plot(mtcars$hp, mtcars$wt, col = mtcars$mpg)
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt)) +
geom_scatter()
library(ggfortify)
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt)) +
geom_scatter()
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt)) +
geom_point()
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point()
mtcars
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point()
ggplot(data = mtcars,
mapping = aes(x = mpg, y = wt, col = cyl)) +
geom_point()
hp
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point()
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab = "Horsepower" +
ylab = "Weight"
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab = "Horsepower"
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab = "Horsepower"
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight")
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
title("Number of cylinders by Horsepower and Weight")
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("Number of cylinders by Horsepower and Weight")
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on other variables
model <- rpart(cyl ~ hp + wt, data = mtcars)
library(rpart)
library(ggfortify)
# Load example data (using the built-in mtcars dataset)
data(mtcars)
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on other variables
model <- rpart(cyl ~ hp + wt, data = mtcars)
# View the model summary
summary(model)
# Plot the regression tree
plot(model)
library(rpart.plot)
# Plot the regression tree
rpart.plot(model)
# View the model summary
summary(model)
# Make predictions
predictions <- predict(model, newdata = mtcars)
# View predictions
head(predictions)
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = cyl)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("Number of cylinders by Horsepower and Weight")
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on other variables
model <- rpart(mpg ~ hp + wt, data = mtcars)
# View the model summary
summary(model)
# Plot the regression tree
rpart.plot(model)
# Make predictions
predictions <- predict(model, newdata = mtcars)
# View predictions
head(predictions)
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("MPG by Horsepower and Weight")
?rpart
?rpart(weights)
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on other variables
model <- rpart(mpg ~ hp + wt, data = mtcars, minsplit = 5)
# View the model summary
summary(model)
# Plot the regression tree
rpart.plot(model)
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on other variables
model <- rpart(mpg ~ hp + wt, data = mtcars, minsplit = 8)
# View the model summary
summary(model)
# Plot the regression tree
rpart.plot(model)
# Make predictions
predictions <- predict(model, newdata = mtcars)
# View predictions
head(predictions)
# Load example data (using the built-in mtcars dataset)
data(mtcars)
# Plot the variables we're interested in
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("MPG by Horsepower and Weight")
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on horsepower and weight
model <- rpart(mpg ~ hp + wt, data = mtcars, minsplit = 8)
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on horsepower and weight
model <- rpart(mpg ~ hp + wt, data = mtcars, minsplit = 8)
# Plot the regression tree
rpart.plot(model)
library(ggfortify)
library(rpart)
library(rpart.plot)
# Load example data (using the built-in mtcars dataset)
data(mtcars)
# Plot the variables we're interested in
ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("MPG by Horsepower and Weight")
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on horsepower and weight
model <- rpart(mpg ~ hp + wt, data = mtcars, minsplit = 8)
# View the model summary
summary(model)
# Plot the regression tree
rpart.plot(model)
# Make predictions
predictions <- predict(model, newdata = mtcars)
# View predictions
head(predictions)
# Plot the variables we're interested in
plot <- ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("MPG by Horsepower and Weight")
plot
splits <- model$splits
# Identify the variable and split points
split_hp <- splits[rownames(splits) == "hp", "index"]
split_wt <- splits[rownames(splits) == "wt", "index"]
# Plot the splits on the scatterplot
# Add vertical lines for splits on horsepower (hp)
if (length(split_hp) > 0) {
plot <- plot + geom_vline(xintercept = split_hp, linetype = "dashed", color = "red")
}
# Add horizontal lines for splits on weight (wt)
if (length(split_wt) > 0) {
plot <- plot + geom_hline(yintercept = split_wt, linetype = "dashed", color = "blue")
}
# Show the updated plot with the splits
print(plot)
plot <- plot + geom_vline(xintercept = split_hp, color = "red")
# Plot the splits on the scatterplot
# Add vertical lines for splits on horsepower (hp)
if (length(split_hp) > 0) {
plot <- plot + geom_vline(xintercept = split_hp, color = "red")
}
# Add horizontal lines for splits on weight (wt)
if (length(split_wt) > 0) {
plot <- plot + geom_hline(yintercept = split_wt, linetype = "dashed", color = "blue")
}
# Show the updated plot with the splits
print(plot)
plot <- plot + geom_hline(yintercept = split_wt, color = "blue")
# Add horizontal lines for splits on weight (wt)
if (length(split_wt) > 0) {
plot <- plot + geom_hline(yintercept = split_wt, color = "blue")
}
# Show the updated plot with the splits
print(plot)
# Plot the regression tree
rpart.plot(model)
# Show the updated plot with the splits
print(plot)
# Plot the variables we're interested in
plot <- ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("MPG by Horsepower and Weight")
plot
library(ggfortify)
library(rpart)
library(rpart.plot)
# Load example data (using the built-in mtcars dataset)
data(mtcars)
# Plot the variables we're interested in
plot <- ggplot(data = mtcars,
mapping = aes(x = hp, y = wt, col = mpg)) +
geom_point() +
xlab("Horsepower") +
ylab("Weight") +
ggtitle("MPG by Horsepower and Weight")
plot
# Fit a regression tree model
# Here, we predict 'mpg' (miles per gallon) based on horsepower and weight
model <- rpart(mpg ~ hp + wt, data = mtcars, minsplit = 8)
# View the model summary
summary(model)
# Plot the regression tree
rpart.plot(model)
# Make predictions
predictions <- predict(model, newdata = mtcars)
# View predictions
head(predictions)
